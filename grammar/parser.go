// Code generated by goyacc -p xx -o /grammar/parser.go /grammar/grammar.y. DO NOT EDIT.

//line /grammar/grammar.y:31
package grammar

import __yyfmt__ "fmt"

//line /grammar/grammar.y:31
import (
	"fmt"

	"github.com/VirusTotal/go-yara-parser/data"
)

var ParsedRuleset data.RuleSet

//line /grammar/grammar.y:139
type xxSymType struct {
	yys int
	i64 int64
	f64 float64
	s   string
	ss  []string

	rm    data.RuleModifiers
	m     data.Metas
	mp    data.Meta
	mps   data.Metas
	mod   data.StringModifiers
	reg   data.Regexp
	ys    data.String
	yss   data.Strings
	yr    data.Rule
	term  data.BooleanExpressionTerm
	terms []data.BooleanExpressionTerm
	pex   data.PrimaryExpression
	pexs  []data.PrimaryExpression
	id    data.Identifier
	fex   data.ForExpression
	iset  data.IntegerSet
	rng   data.Range
	strs  data.StringSet
	stri  data.StringEnumerationItem
	stris []data.StringEnumerationItem
}

const _END_OF_INCLUDED_FILE_ = 57346
const _DOT_DOT_ = 57347
const _RULE_ = 57348
const _PRIVATE_ = 57349
const _GLOBAL_ = 57350
const _META_ = 57351
const _STRINGS_ = 57352
const _CONDITION_ = 57353
const _IDENTIFIER_ = 57354
const _STRING_IDENTIFIER_ = 57355
const _STRING_COUNT_ = 57356
const _STRING_OFFSET_ = 57357
const _STRING_LENGTH_ = 57358
const _STRING_IDENTIFIER_WITH_WILDCARD_ = 57359
const _NUMBER_ = 57360
const _DOUBLE_ = 57361
const _INTEGER_FUNCTION_ = 57362
const _TEXT_STRING_ = 57363
const _HEX_STRING_ = 57364
const _REGEXP_ = 57365
const _ASCII_ = 57366
const _WIDE_ = 57367
const _XOR_ = 57368
const _NOCASE_ = 57369
const _FULLWORD_ = 57370
const _AT_ = 57371
const _FILESIZE_ = 57372
const _ENTRYPOINT_ = 57373
const _ALL_ = 57374
const _ANY_ = 57375
const _IN_ = 57376
const _OF_ = 57377
const _FOR_ = 57378
const _THEM_ = 57379
const _MATCHES_ = 57380
const _CONTAINS_ = 57381
const _IMPORT_ = 57382
const _TRUE_ = 57383
const _FALSE_ = 57384
const _LBRACE_ = 57385
const _RBRACE_ = 57386
const _INCLUDE_ = 57387
const _OR_ = 57388
const _AND_ = 57389
const _EQ_ = 57390
const _NEQ_ = 57391
const _LT_ = 57392
const _LE_ = 57393
const _GT_ = 57394
const _GE_ = 57395
const _SHIFT_LEFT_ = 57396
const _SHIFT_RIGHT_ = 57397
const _NOT_ = 57398
const UNARY_MINUS = 57399

var xxToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_END_OF_INCLUDED_FILE_",
	"_DOT_DOT_",
	"_RULE_",
	"_PRIVATE_",
	"_GLOBAL_",
	"_META_",
	"_STRINGS_",
	"_CONDITION_",
	"_IDENTIFIER_",
	"_STRING_IDENTIFIER_",
	"_STRING_COUNT_",
	"_STRING_OFFSET_",
	"_STRING_LENGTH_",
	"_STRING_IDENTIFIER_WITH_WILDCARD_",
	"_NUMBER_",
	"_DOUBLE_",
	"_INTEGER_FUNCTION_",
	"_TEXT_STRING_",
	"_HEX_STRING_",
	"_REGEXP_",
	"_ASCII_",
	"_WIDE_",
	"_XOR_",
	"_NOCASE_",
	"_FULLWORD_",
	"_AT_",
	"_FILESIZE_",
	"_ENTRYPOINT_",
	"_ALL_",
	"_ANY_",
	"_IN_",
	"_OF_",
	"_FOR_",
	"_THEM_",
	"_MATCHES_",
	"_CONTAINS_",
	"_IMPORT_",
	"_TRUE_",
	"_FALSE_",
	"_LBRACE_",
	"_RBRACE_",
	"_INCLUDE_",
	"_OR_",
	"_AND_",
	"'|'",
	"'^'",
	"'&'",
	"_EQ_",
	"_NEQ_",
	"_LT_",
	"_LE_",
	"_GT_",
	"_GE_",
	"_SHIFT_LEFT_",
	"_SHIFT_RIGHT_",
	"'+'",
	"'-'",
	"'*'",
	"'\\\\'",
	"'%'",
	"_NOT_",
	"'~'",
	"UNARY_MINUS",
	"':'",
	"'='",
	"'.'",
	"'['",
	"']'",
	"'('",
	"')'",
	"','",
}
var xxStatenames = [...]string{}

const xxEofCode = 1
const xxErrCode = 2
const xxInitialStackSize = 16

//line /grammar/grammar.y:904

func createOrExpression(terms ...data.BooleanExpressionTerm) (or data.OrExpression) {
	for _, term := range terms {
		if term.OrExpression == nil {
			or = append(or, term)
		} else {
			or = append(or, *term.OrExpression...)
		}
	}

	return
}

func createAndExpression(terms ...data.BooleanExpressionTerm) (and data.AndExpression) {
	for _, term := range terms {
		if term.AndExpression == nil {
			and = append(and, term)
		} else {
			and = append(and, *term.AndExpression...)
		}
	}

	return
}

//line yacctab:1
var xxExca = [...]int{
	-1, 1,
	1, -1,
	-2, 15,
	-1, 42,
	23, 34,
	-2, 32,
	-1, 52,
	35, 87,
	-2, 74,
	-1, 107,
	35, 87,
	-2, 74,
	-1, 158,
	73, 50,
	74, 50,
	-2, 53,
	-1, 187,
	73, 51,
	74, 51,
	-2, 53,
}

const xxPrivate = 57344

const xxLast = 403

var xxAct = [...]int{

	52, 165, 49, 140, 146, 159, 80, 79, 196, 197,
	173, 73, 53, 64, 65, 66, 172, 61, 62, 60,
	63, 108, 74, 70, 149, 80, 79, 185, 186, 58,
	59, 71, 72, 202, 195, 54, 96, 94, 95, 148,
	50, 51, 192, 182, 141, 97, 98, 89, 90, 91,
	92, 93, 201, 112, 113, 102, 114, 109, 107, 68,
	106, 194, 48, 56, 69, 111, 110, 79, 42, 115,
	116, 57, 38, 189, 147, 184, 40, 28, 105, 26,
	17, 80, 79, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 119, 120, 18, 145, 121, 91, 92, 93, 55,
	151, 152, 153, 39, 155, 81, 82, 158, 89, 90,
	91, 92, 93, 104, 160, 96, 94, 95, 87, 88,
	83, 85, 84, 86, 97, 98, 89, 90, 91, 92,
	93, 162, 161, 99, 44, 35, 142, 43, 100, 163,
	150, 73, 74, 64, 65, 66, 143, 61, 62, 60,
	63, 5, 74, 118, 101, 77, 183, 46, 47, 58,
	59, 71, 72, 30, 117, 13, 187, 8, 78, 144,
	41, 188, 95, 191, 36, 154, 45, 31, 193, 97,
	98, 89, 90, 91, 92, 93, 166, 7, 200, 68,
	167, 23, 4, 37, 69, 176, 175, 179, 177, 178,
	20, 103, 14, 33, 198, 25, 73, 199, 64, 65,
	66, 22, 61, 62, 60, 63, 76, 74, 96, 94,
	95, 9, 11, 12, 58, 59, 75, 97, 98, 89,
	90, 91, 92, 93, 27, 96, 94, 95, 15, 1,
	164, 190, 181, 168, 97, 98, 89, 90, 91, 92,
	93, 156, 157, 67, 68, 32, 6, 10, 174, 69,
	150, 96, 94, 95, 34, 24, 103, 29, 21, 19,
	97, 98, 89, 90, 91, 92, 93, 96, 94, 95,
	16, 2, 3, 0, 171, 0, 97, 98, 89, 90,
	91, 92, 93, 96, 94, 95, 180, 0, 0, 0,
	170, 0, 97, 98, 89, 90, 91, 92, 93, 81,
	82, 0, 0, 0, 0, 0, 169, 0, 0, 96,
	94, 95, 87, 88, 83, 85, 84, 86, 97, 98,
	89, 90, 91, 92, 93, 0, 0, 0, 0, 96,
	94, 95, 0, 0, 0, 0, 0, 0, 97, 98,
	89, 90, 91, 92, 93, 96, 94, 95, 0, 0,
	0, 0, 0, 0, 97, 98, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 97,
	98, 89, 90, 91, 92, 93, 97, 98, 89, 90,
	91, 92, 93,
}
var xxPact = [...]int{

	-1000, 157, -1000, -1000, 156, -1000, 225, 154, -1000, 200,
	-1000, -1000, -1000, -1000, -1000, 13, 60, 198, 212, 189,
	-1000, 205, 12, -1000, -1000, 10, 175, 202, 171, 175,
	-1000, 4, 69, 9, 171, -1000, 0, -1000, 126, -1000,
	-1, -1000, 143, -1000, -1000, 160, -1000, -1000, 35, -1000,
	-1000, -1000, 281, 114, 139, 88, -1, -1, -1000, -1000,
	-15, -1000, -1000, -1000, -1000, -4, -5, -16, 204, 204,
	-1000, -1000, -1000, -1000, -1000, 153, 140, -1000, -1000, -1,
	-1, 129, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	-28, 144, 317, 204, 2, -1000, -49, 77, 35, 204,
	204, 204, 173, 204, -1, -1000, -1000, -1000, -1000, -1000,
	20, -1000, 317, 317, 317, 317, 317, 317, 317, 45,
	45, -1000, -1000, -1000, 132, 339, 332, 59, 59, 317,
	-1000, 204, -1000, 107, 2, 197, -1000, 183, -1000, -1000,
	-1000, 180, 255, 239, -1000, 223, -57, -64, -1000, 181,
	181, 301, -29, 8, -46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000,
	204, 6, 204, -1000, -30, -1000, 183, -1000, -12, -38,
	-65, 301, -1, -1000, -1000, -1, -1000, 204, -21, -40,
	317, -1000, -1000,
}
var xxPgo = [...]int{

	0, 292, 291, 290, 279, 278, 277, 173, 275, 274,
	145, 268, 5, 267, 266, 265, 21, 2, 0, 263,
	262, 261, 23, 109, 252, 251, 3, 4, 1, 250,
	249, 248, 244, 236, 226,
}
var xxR1 = [...]int{

	0, 30, 30, 30, 30, 30, 1, 31, 32, 2,
	5, 5, 8, 8, 15, 14, 14, 13, 13, 3,
	3, 4, 4, 6, 6, 7, 7, 7, 7, 7,
	9, 9, 33, 10, 34, 10, 10, 12, 12, 11,
	11, 11, 11, 11, 19, 19, 19, 19, 21, 21,
	20, 20, 22, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 24, 24, 26, 25,
	25, 27, 27, 29, 29, 28, 28, 23, 23, 23,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18,
}
var xxR2 = [...]int{

	0, 0, 2, 2, 3, 2, 2, 0, 0, 11,
	0, 3, 0, 3, 3, 0, 2, 1, 1, 0,
	2, 1, 2, 1, 2, 3, 3, 4, 3, 3,
	1, 2, 0, 5, 0, 5, 3, 0, 2, 1,
	1, 1, 1, 1, 1, 3, 4, 4, 0, 1,
	1, 3, 1, 1, 1, 1, 3, 3, 1, 3,
	3, 3, 9, 8, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 1, 5, 1,
	3, 3, 1, 1, 3, 1, 1, 1, 1, 1,
	3, 1, 1, 4, 1, 1, 1, 1, 4, 1,
	4, 1, 1, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 1,
}
var xxChk = [...]int{

	-1000, -30, -2, -1, 45, 4, -14, 40, 21, 6,
	-13, 7, 8, 21, 12, -31, -3, 67, 43, -4,
	12, -5, 9, 12, -8, 10, 67, -32, 67, -6,
	-7, 12, -15, 11, -9, -10, 13, -7, 68, 44,
	67, -10, 68, 21, 18, 60, 41, 42, -16, -17,
	41, 42, -18, 13, 36, -23, 64, 72, 30, 31,
	20, 18, 19, 21, 14, 15, 16, -19, 60, 65,
	-22, 32, 33, 12, 23, -33, -34, 22, 18, 47,
	46, 38, 39, 53, 55, 54, 56, 51, 52, 59,
	60, 61, 62, 63, 49, 50, 48, 57, 58, 29,
	34, -23, -18, 72, 35, -16, -17, -18, -16, 72,
	70, 70, 69, 70, 72, -18, -18, 21, 23, -16,
	-16, -22, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-26, 72, 2, 12, 35, -18, -27, 72, 37, 73,
	73, -18, -18, -18, 12, -18, -21, -20, -17, -12,
	-12, -18, 34, -27, -29, -28, 13, 17, 73, 71,
	71, 71, 73, 74, -11, 25, 24, 27, 28, 26,
	5, -24, 72, -26, 67, 73, 74, -17, -18, 67,
	-25, -18, 72, -28, 73, 72, 73, 74, -16, -16,
	-18, 73, 73,
}
var xxDef = [...]int{

	1, -2, 2, 3, 0, 5, 0, 0, 4, 0,
	16, 17, 18, 6, 7, 19, 0, 0, 10, 20,
	21, 12, 0, 22, 8, 0, 0, 0, 0, 11,
	23, 0, 0, 0, 13, 30, 0, 24, 0, 9,
	0, 31, -2, 25, 26, 0, 28, 29, 14, 53,
	54, 55, -2, 58, 0, 0, 0, 0, 91, 92,
	0, 94, 95, 96, 97, 99, 101, 102, 0, 0,
	115, 88, 89, 44, 52, 0, 0, 36, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 65, 53, -2, 0, 0,
	0, 0, 0, 0, 48, 103, 112, 37, 37, 66,
	67, 56, 57, 68, 69, 70, 71, 72, 73, 104,
	105, 106, 107, 108, 109, 110, 111, 113, 114, 59,
	60, 0, 61, 0, 0, 0, 64, 0, 82, 75,
	90, 0, 0, 0, 45, 0, 0, 49, -2, 33,
	35, 0, 0, 0, 0, 83, 85, 86, 93, 98,
	100, 46, 47, 0, 38, 39, 40, 41, 42, 43,
	0, 0, 0, 77, 0, 81, 0, -2, 0, 0,
	0, 79, 0, 84, 78, 0, 76, 0, 0, 0,
	80, 63, 62,
}
var xxTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 63, 50, 3,
	72, 73, 61, 59, 74, 60, 69, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 67, 3,
	3, 68, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 62, 71, 49, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 48, 3, 65,
}
var xxTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 51, 52, 53, 54,
	55, 56, 57, 58, 64, 66,
}
var xxTok3 = [...]int{
	0,
}

var xxErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	xxDebug        = 0
	xxErrorVerbose = false
)

type xxLexer interface {
	Lex(lval *xxSymType) int
	Error(s string)
}

type xxParser interface {
	Parse(xxLexer) int
	Lookahead() int
}

type xxParserImpl struct {
	lval  xxSymType
	stack [xxInitialStackSize]xxSymType
	char  int
}

func (p *xxParserImpl) Lookahead() int {
	return p.char
}

func xxNewParser() xxParser {
	return &xxParserImpl{}
}

const xxFlag = -1000

func xxTokname(c int) string {
	if c >= 1 && c-1 < len(xxToknames) {
		if xxToknames[c-1] != "" {
			return xxToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func xxStatname(s int) string {
	if s >= 0 && s < len(xxStatenames) {
		if xxStatenames[s] != "" {
			return xxStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func xxErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !xxErrorVerbose {
		return "syntax error"
	}

	for _, e := range xxErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + xxTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := xxPact[state]
	for tok := TOKSTART; tok-1 < len(xxToknames); tok++ {
		if n := base + tok; n >= 0 && n < xxLast && xxChk[xxAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if xxDef[state] == -2 {
		i := 0
		for xxExca[i] != -1 || xxExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; xxExca[i] >= 0; i += 2 {
			tok := xxExca[i]
			if tok < TOKSTART || xxExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if xxExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += xxTokname(tok)
	}
	return res
}

func xxlex1(lex xxLexer, lval *xxSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = xxTok1[0]
		goto out
	}
	if char < len(xxTok1) {
		token = xxTok1[char]
		goto out
	}
	if char >= xxPrivate {
		if char < xxPrivate+len(xxTok2) {
			token = xxTok2[char-xxPrivate]
			goto out
		}
	}
	for i := 0; i < len(xxTok3); i += 2 {
		token = xxTok3[i+0]
		if token == char {
			token = xxTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = xxTok2[1] /* unknown char */
	}
	if xxDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", xxTokname(token), uint(char))
	}
	return char, token
}

func xxParse(xxlex xxLexer) int {
	return xxNewParser().Parse(xxlex)
}

func (xxrcvr *xxParserImpl) Parse(xxlex xxLexer) int {
	var xxn int
	var xxVAL xxSymType
	var xxDollar []xxSymType
	_ = xxDollar // silence set and not used
	xxS := xxrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	xxstate := 0
	xxrcvr.char = -1
	xxtoken := -1 // xxrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		xxstate = -1
		xxrcvr.char = -1
		xxtoken = -1
	}()
	xxp := -1
	goto xxstack

ret0:
	return 0

ret1:
	return 1

xxstack:
	/* put a state and value onto the stack */
	if xxDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", xxTokname(xxtoken), xxStatname(xxstate))
	}

	xxp++
	if xxp >= len(xxS) {
		nyys := make([]xxSymType, len(xxS)*2)
		copy(nyys, xxS)
		xxS = nyys
	}
	xxS[xxp] = xxVAL
	xxS[xxp].yys = xxstate

xxnewstate:
	xxn = xxPact[xxstate]
	if xxn <= xxFlag {
		goto xxdefault /* simple state */
	}
	if xxrcvr.char < 0 {
		xxrcvr.char, xxtoken = xxlex1(xxlex, &xxrcvr.lval)
	}
	xxn += xxtoken
	if xxn < 0 || xxn >= xxLast {
		goto xxdefault
	}
	xxn = xxAct[xxn]
	if xxChk[xxn] == xxtoken { /* valid shift */
		xxrcvr.char = -1
		xxtoken = -1
		xxVAL = xxrcvr.lval
		xxstate = xxn
		if Errflag > 0 {
			Errflag--
		}
		goto xxstack
	}

xxdefault:
	/* default state action */
	xxn = xxDef[xxstate]
	if xxn == -2 {
		if xxrcvr.char < 0 {
			xxrcvr.char, xxtoken = xxlex1(xxlex, &xxrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if xxExca[xi+0] == -1 && xxExca[xi+1] == xxstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			xxn = xxExca[xi+0]
			if xxn < 0 || xxn == xxtoken {
				break
			}
		}
		xxn = xxExca[xi+1]
		if xxn < 0 {
			goto ret0
		}
	}
	if xxn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			xxlex.Error(xxErrorMessage(xxstate, xxtoken))
			Nerrs++
			if xxDebug >= 1 {
				__yyfmt__.Printf("%s", xxStatname(xxstate))
				__yyfmt__.Printf(" saw %s\n", xxTokname(xxtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for xxp >= 0 {
				xxn = xxPact[xxS[xxp].yys] + xxErrCode
				if xxn >= 0 && xxn < xxLast {
					xxstate = xxAct[xxn] /* simulate a shift of "error" */
					if xxChk[xxstate] == xxErrCode {
						goto xxstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if xxDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", xxS[xxp].yys)
				}
				xxp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if xxDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", xxTokname(xxtoken))
			}
			if xxtoken == xxEofCode {
				goto ret1
			}
			xxrcvr.char = -1
			xxtoken = -1
			goto xxnewstate /* try again in the same state */
		}
	}

	/* reduction by production xxn */
	if xxDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", xxn, xxStatname(xxstate))
	}

	xxnt := xxn
	xxpt := xxp
	_ = xxpt // guard against "declared and not used"

	xxp -= xxR2[xxn]
	// xxp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if xxp+1 >= len(xxS) {
		nyys := make([]xxSymType, len(xxS)*2)
		copy(nyys, xxS)
		xxS = nyys
	}
	xxVAL = xxS[xxp+1]

	/* consult goto table to find next state */
	xxn = xxR1[xxn]
	xxg := xxPgo[xxn]
	xxj := xxg + xxS[xxp].yys + 1

	if xxj >= xxLast {
		xxstate = xxAct[xxg]
	} else {
		xxstate = xxAct[xxj]
		if xxChk[xxstate] != -xxn {
			xxstate = xxAct[xxg]
		}
	}
	// dummy call; replaced with literal code
	switch xxnt {

	case 2:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:172
		{
			ParsedRuleset.Rules = append(ParsedRuleset.Rules, xxDollar[2].yr)
		}
	case 3:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:175
		{
			ParsedRuleset.Imports = append(ParsedRuleset.Imports, xxDollar[2].s)
		}
	case 4:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:178
		{
			ParsedRuleset.Includes = append(ParsedRuleset.Includes, xxDollar[3].s)
		}
	case 5:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:181
		{
		}
	case 6:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:187
		{
			xxVAL.s = xxDollar[2].s
		}
	case 7:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:195
		{
			xxVAL.yr.Modifiers = xxDollar[1].rm
			xxVAL.yr.Identifier = xxDollar[3].s

			// Forbid duplicate rules
			for _, r := range ParsedRuleset.Rules {
				if xxDollar[3].s == r.Identifier {
					err := fmt.Errorf(`Duplicate rule "%s"`, xxDollar[3].s)
					panic(err)
				}
			}
		}
	case 8:
		xxDollar = xxS[xxpt-8 : xxpt+1]
//line /grammar/grammar.y:208
		{
			// $4 is the rule created in above action
			xxDollar[4].yr.Tags = xxDollar[5].ss

			// Forbid duplicate tags
			idx := make(map[string]struct{})
			for _, t := range xxDollar[5].ss {
				if _, had := idx[t]; had {
					msg := fmt.Sprintf(`grammar: Rule "%s" has duplicate tag "%s"`,
						xxDollar[4].yr.Identifier,
						t)
					panic(msg)
				}
				idx[t] = struct{}{}
			}

			xxDollar[4].yr.Meta = xxDollar[7].m

			xxDollar[4].yr.Strings = xxDollar[8].yss

			// Forbid duplicate string IDs, except `$` (anonymous)
			idx = make(map[string]struct{})
			for _, s := range xxDollar[8].yss {
				if s.ID == "$" {
					continue
				}
				if _, had := idx[s.ID]; had {
					msg := fmt.Sprintf(
						`grammar: Rule "%s" has duplicated string "%s"`,
						xxDollar[4].yr.Identifier,
						s.ID)
					panic(msg)
				}
				idx[s.ID] = struct{}{}
			}
		}
	case 9:
		xxDollar = xxS[xxpt-11 : xxpt+1]
//line /grammar/grammar.y:245
		{
			xxDollar[4].yr.Condition = xxDollar[10].term
			xxVAL.yr = xxDollar[4].yr
		}
	case 10:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:254
		{

		}
	case 11:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:258
		{
			xxVAL.m = make(data.Metas, 0, len(xxDollar[3].mps))
			for _, mpair := range xxDollar[3].mps {
				// YARA is ok with duplicate keys; we follow suit
				xxVAL.m = append(xxVAL.m, mpair)
			}
		}
	case 12:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:270
		{
			xxVAL.yss = data.Strings{}
		}
	case 13:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:274
		{
			xxVAL.yss = xxDollar[3].yss
		}
	case 14:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:282
		{
			xxVAL.term = xxDollar[3].term
		}
	case 15:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:289
		{
			xxVAL.rm = data.RuleModifiers{}
		}
	case 16:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:290
		{
			xxVAL.rm.Private = xxVAL.rm.Private || xxDollar[2].rm.Private
			xxVAL.rm.Global = xxVAL.rm.Global || xxDollar[2].rm.Global
		}
	case 17:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:298
		{
			xxVAL.rm.Private = true
		}
	case 18:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:299
		{
			xxVAL.rm.Global = true
		}
	case 19:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:305
		{
			xxVAL.ss = []string{}
		}
	case 20:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:309
		{
			xxVAL.ss = xxDollar[2].ss
		}
	case 21:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:317
		{
			xxVAL.ss = []string{xxDollar[1].s}
		}
	case 22:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:321
		{
			xxVAL.ss = append(xxDollar[1].ss, xxDollar[2].s)
		}
	case 23:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:328
		{
			xxVAL.mps = data.Metas{xxDollar[1].mp}
		}
	case 24:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:329
		{
			xxVAL.mps = append(xxVAL.mps, xxDollar[2].mp)
		}
	case 25:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:335
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, xxDollar[3].s}
		}
	case 26:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:339
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, xxDollar[3].i64}
		}
	case 27:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:343
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, -xxDollar[4].i64}
		}
	case 28:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:347
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, true}
		}
	case 29:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:351
		{
			xxVAL.mp = data.Meta{xxDollar[1].s, false}
		}
	case 30:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:358
		{
			xxVAL.yss = data.Strings{xxDollar[1].ys}
		}
	case 31:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:359
		{
			xxVAL.yss = append(xxDollar[1].yss, xxDollar[2].ys)
		}
	case 32:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:365
		{
			xxVAL.ys.Type = data.TypeString
			xxVAL.ys.ID = xxDollar[1].s
		}
	case 33:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:370
		{
			xxDollar[3].ys.Text = xxDollar[4].s
			xxDollar[3].ys.Modifiers = xxDollar[5].mod

			xxVAL.ys = xxDollar[3].ys
		}
	case 34:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:377
		{
			xxVAL.ys.Type = data.TypeRegex
			xxVAL.ys.ID = xxDollar[1].s
		}
	case 35:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:382
		{
			xxDollar[3].ys.Text = xxDollar[4].reg.Text

			xxDollar[5].mod.I = xxDollar[4].reg.Modifiers.I
			xxDollar[5].mod.S = xxDollar[4].reg.Modifiers.S

			xxDollar[3].ys.Modifiers = xxDollar[5].mod

			xxVAL.ys = xxDollar[3].ys
		}
	case 36:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:393
		{
			xxVAL.ys.Type = data.TypeHexString
			xxVAL.ys.ID = xxDollar[1].s
			xxVAL.ys.Text = xxDollar[3].s
		}
	case 37:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:402
		{
			xxVAL.mod = data.StringModifiers{}
		}
	case 38:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:405
		{
			xxVAL.mod = data.StringModifiers{
				Wide:     xxDollar[1].mod.Wide || xxDollar[2].mod.Wide,
				ASCII:    xxDollar[1].mod.ASCII || xxDollar[2].mod.ASCII,
				Nocase:   xxDollar[1].mod.Nocase || xxDollar[2].mod.Nocase,
				Fullword: xxDollar[1].mod.Fullword || xxDollar[2].mod.Fullword,
				Xor:      xxDollar[1].mod.Xor || xxDollar[2].mod.Xor,
			}
		}
	case 39:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:418
		{
			xxVAL.mod.Wide = true
		}
	case 40:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:419
		{
			xxVAL.mod.ASCII = true
		}
	case 41:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:420
		{
			xxVAL.mod.Nocase = true
		}
	case 42:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:421
		{
			xxVAL.mod.Fullword = true
		}
	case 43:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:422
		{
			xxVAL.mod.Xor = true
		}
	case 44:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:429
		{
			xxVAL.id = []data.IdentifierItem{{Identifier: xxDollar[1].s}}
		}
	case 45:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:433
		{
			xxVAL.id = append(xxDollar[1].id, data.IdentifierItem{Identifier: xxDollar[3].s})
		}
	case 46:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:437
		{
			xxVAL.id = append(xxDollar[1].id, data.IdentifierItem{PrimaryExpression: xxDollar[3].pex})
		}
	case 47:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:442
		{
			xxVAL.id = append(xxDollar[1].id, data.IdentifierItem{Arguments: xxDollar[3].terms})
		}
	case 48:
		xxDollar = xxS[xxpt-0 : xxpt+1]
//line /grammar/grammar.y:449
		{
			xxVAL.terms = []data.BooleanExpressionTerm{}
		}
	case 49:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:450
		{
			xxVAL.terms = xxDollar[1].terms
		}
	case 50:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:455
		{
			xxVAL.terms = []data.BooleanExpressionTerm{xxDollar[1].term}
		}
	case 51:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:459
		{
			xxVAL.terms = append(xxDollar[1].terms, xxDollar[3].term)
		}
	case 52:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:466
		{
			xxVAL.reg = xxDollar[1].reg
		}
	case 53:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:471
		{
			xxVAL.term = xxDollar[1].term
		}
	case 54:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:476
		{
			xxVAL.term = data.BooleanExpressionTerm{BoolValue: true}
		}
	case 55:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:480
		{
			xxVAL.term = data.BooleanExpressionTerm{BoolValue: false}
		}
	case 56:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:484
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.MatchesOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].reg,
				},
			}
		}
	case 57:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:494
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.ContainsOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 58:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:504
		{
			xxVAL.term = data.BooleanExpressionTerm{
				StringIdentifier: xxDollar[1].s,
			}
		}
	case 59:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:510
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.AtOperator,
					Left:     xxDollar[1].s,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 60:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:520
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.InOperator,
					Left:     xxDollar[1].s,
					Right:    xxDollar[3].rng,
				},
			}
		}
	case 61:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:529
		{
		}
	case 62:
		xxDollar = xxS[xxpt-9 : xxpt+1]
//line /grammar/grammar.y:531
		{
			xxVAL.term = data.BooleanExpressionTerm{
				ForInExpression: &data.ForInExpression{
					ForExpression: xxDollar[2].fex,
					Identifier:    xxDollar[3].s,
					IntegerSet:    xxDollar[5].iset,
					Expression:    xxDollar[8].term,
				},
			}
		}
	case 63:
		xxDollar = xxS[xxpt-8 : xxpt+1]
//line /grammar/grammar.y:542
		{
			xxVAL.term = data.BooleanExpressionTerm{
				ForOfExpression: &data.ForOfExpression{
					ForExpression: xxDollar[2].fex,
					StringSet:     xxDollar[4].strs,
					Expression:    xxDollar[7].term,
				},
			}
		}
	case 64:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:552
		{
			xxVAL.term = data.BooleanExpressionTerm{
				ForOfExpression: &data.ForOfExpression{
					ForExpression: xxDollar[1].fex,
					StringSet:     xxDollar[3].strs,
				},
			}
		}
	case 65:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:561
		{
			xxVAL.term = data.BooleanExpressionTerm{
				NotExpression: &xxDollar[2].term,
			}
		}
	case 66:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:567
		{
			and := createAndExpression(xxDollar[1].term, xxDollar[3].term)
			xxVAL.term = data.BooleanExpressionTerm{
				AndExpression: &and,
			}
		}
	case 67:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:574
		{
			or := createOrExpression(xxDollar[1].term, xxDollar[3].term)
			xxVAL.term = data.BooleanExpressionTerm{
				OrExpression: &or,
			}
		}
	case 68:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:581
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.LtOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 69:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:591
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.GtOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 70:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:601
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.LeOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 71:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:611
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.GeOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 72:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:621
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.EqOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 73:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:631
		{
			xxVAL.term = data.BooleanExpressionTerm{
				BinaryExpression: &data.BinaryExpression{
					Operator: data.NeqOperator,
					Left:     xxDollar[1].pex,
					Right:    xxDollar[3].pex,
				},
			}
		}
	case 74:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:641
		{
			xxVAL.term = data.BooleanExpressionTerm{PrimaryExpression: xxDollar[1].pex}
		}
	case 75:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:645
		{
			xxVAL.term = xxDollar[2].term
		}
	case 76:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:653
		{
			xxVAL.iset = data.IntegerSet{IntegerEnumeration: xxDollar[2].pexs}
		}
	case 77:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:657
		{
			xxVAL.iset = data.IntegerSet{Range: &xxDollar[1].rng}
		}
	case 78:
		xxDollar = xxS[xxpt-5 : xxpt+1]
//line /grammar/grammar.y:665
		{
			xxVAL.rng = data.Range{
				Start: xxDollar[2].pex,
				End:   xxDollar[4].pex,
			}
		}
	case 79:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:675
		{
			xxVAL.pexs = []data.PrimaryExpression{xxDollar[1].pex}
		}
	case 80:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:676
		{
			xxVAL.pexs = append(xxDollar[1].pexs, xxDollar[3].pex)
		}
	case 81:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:684
		{
			xxVAL.strs = data.StringSet{StringEnumeration: xxDollar[2].stris}
		}
	case 82:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:688
		{
			xxVAL.strs = data.StringSet{Keyword: data.ThemKeyword}
		}
	case 83:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:695
		{
			xxVAL.stris = []data.StringEnumerationItem{xxDollar[1].stri}
		}
	case 84:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:697
		{
			xxVAL.stris = append(xxDollar[1].stris, xxDollar[3].stri)
		}
	case 85:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:705
		{
			xxVAL.stri = data.StringEnumerationItem{
				StringIdentifier: xxDollar[1].s,
				HasWildcard:      false,
			}
		}
	case 86:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:712
		{
			xxVAL.stri = data.StringEnumerationItem{
				StringIdentifier: xxDollar[1].s,
				HasWildcard:      true,
			}
		}
	case 87:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:723
		{
			xxVAL.fex = data.ForExpression{PrimaryExpression: xxDollar[1].pex}
		}
	case 88:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:727
		{
			xxVAL.fex = data.ForExpression{Keyword: data.AllKeyword}
		}
	case 89:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:731
		{
			xxVAL.fex = data.ForExpression{Keyword: data.AnyKeyword}
		}
	case 90:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:739
		{
			xxVAL.pex = xxDollar[2].pex
		}
	case 91:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:743
		{
			xxVAL.pex = data.FilesizeKeyword
		}
	case 92:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:747
		{
			xxVAL.pex = data.EntrypointKeyword
		}
	case 93:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:751
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.IntegerFunctionOperator,
				Left:     xxDollar[1].s,
				Right:    xxDollar[3].pex,
			}
		}
	case 94:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:759
		{
			xxVAL.pex = xxDollar[1].i64
		}
	case 95:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:763
		{
			xxVAL.pex = xxDollar[1].f64
		}
	case 96:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:767
		{
			xxVAL.pex = xxDollar[1].s
		}
	case 97:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:771
		{
			xxVAL.pex = data.StringCount{StringIdentifier: xxDollar[1].s}
		}
	case 98:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:775
		{
			xxVAL.pex = data.StringOffset{
				StringIdentifier: xxDollar[1].s,
				Index:            xxDollar[3].pex,
			}
		}
	case 99:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:782
		{
			xxVAL.pex = data.StringOffset{
				StringIdentifier: xxDollar[1].s,
			}
		}
	case 100:
		xxDollar = xxS[xxpt-4 : xxpt+1]
//line /grammar/grammar.y:788
		{
			xxVAL.pex = data.StringLength{
				StringIdentifier: xxDollar[1].s,
				Index:            xxDollar[3].pex,
			}
		}
	case 101:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:795
		{
			xxVAL.pex = data.StringLength{
				StringIdentifier: xxDollar[1].s,
			}
		}
	case 102:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:801
		{
			xxVAL.pex = xxDollar[1].id
		}
	case 103:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:805
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.UnaryMinusOperator,
				Left:     xxDollar[2].pex,
			}
		}
	case 104:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:812
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.PlusOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 105:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:820
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.MinusOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 106:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:828
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.TimesOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 107:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:836
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.DivOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 108:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:844
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.ModOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 109:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:852
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.XorOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 110:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:860
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.BitwiseAndOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 111:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:868
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.BitwiseOrOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 112:
		xxDollar = xxS[xxpt-2 : xxpt+1]
//line /grammar/grammar.y:876
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.BitwiseNotOperator,
				Left:     xxDollar[2].pex,
			}
		}
	case 113:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:883
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.ShiftLeftOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 114:
		xxDollar = xxS[xxpt-3 : xxpt+1]
//line /grammar/grammar.y:891
		{
			xxVAL.pex = data.BinaryPrimaryExpression{
				Operator: data.ShiftRightOperator,
				Left:     xxDollar[1].pex,
				Right:    xxDollar[3].pex,
			}
		}
	case 115:
		xxDollar = xxS[xxpt-1 : xxpt+1]
//line /grammar/grammar.y:899
		{
			xxVAL.pex = xxDollar[1].reg
		}
	}
	goto xxstack /* stack new state and value */
}
